#!/usr/bin/env bash

# Remove when debugging
exec 2>/dev/null

# 'Lubby r1' by Lupspie
# Inspired by:
#   'grabby v2' by sannfdev (https://github.com/sannfdev/grabby)
#   'nitch' by ssleert (https://github.com/ssleert/nitch)
#   'pfetch' by dylanaraps (https://github.com/dylanaraps/pfetch)
#   'hyfetch' by hykilpikonna (https://github.com/hykilpikonna/hyfetch)
#   'fet.sh' by 6gk (https://github.com/6gk/fet.sh)

LANG=en_US.UTF-8

# Labels
readonly label_distro=' distro'          # Default: ' distro'
readonly label_shell=' shell'            # Default: ' shell'
readonly label_wm_de=' wm/de'            # Default: ' wm/de'
readonly label_uptime=' uptime'          # Default: ' uptime'
readonly label_resolution=' resolution'  # Default: ' resolution'
readonly label_cpu=' cpu'                # Default: ' cpu'
readonly label_host=' host'              # Default: ' host'
readonly label_ram=' memory'             # Default: ' memory'
readonly label_disk=' disk quota'        # Default: ' disk quota'

# Icons
readonly icon_disk_filled='#' # Default: '#'
readonly icon_disk_total='.'  # Default: '.'
readonly icon_arrow=''       # Default: ''

# Colors ~ https://gist.github.com/iamnewton/8754917
readonly color_base='\033[1;37m'              # Default: '\033[1;37m'
readonly color_accent_primary='\033[1;34m'    # Default: '\033[1;34m'
readonly color_accent_secondary='\033[1;33m'  # Default: '\033[1;33m'

# Box
readonly box_upper_left='\xe2\x95\xad'    # Default: '\xe2\x95\xad'
readonly box_upper_right='\xe2\x95\xae'   # Default: '\xe2\x95\xae'
readonly box_bottom_left='\xe2\x95\xb0'   # Default: '\xe2\x95\xb0'
readonly box_bottom_right='\xe2\x95\xaf'  # Default: '\xe2\x95\xaf'
readonly box_divider_left='\xe2\x94\x9c'  # Default: '\xe2\x94\x9c'
readonly box_divider_right='\xe2\x94\xa4' # Default: '\xe2\x94\xa4'
readonly box_horizontal='\xe2\x94\x80'    # Default: '\xe2\x94\x80'
readonly box_vertical='\xe2\x94\x82'      # Default: '\xe2\x94\x82'

# Overrides ~ Leave empty for default values
custom_title='' # Use a custom box header title (if left empty, user@host will be used instead)
box_width='' # Forces a specific width. (if left empty, the length of the title will be used as width)
disk_bar_width='30' # Controls the disk bar's width.
disk_regex='^/dev' # Controls the regex used to fetch the disks to display.
hide_user='false' # True = Hides your username
hide_host='false' # True = Hides your hostname

######### ! CONFIG STUFF ENDED ! #########
######### ! CONFIG STUFF ENDED ! #########

# Box Stuff
box__draw_header() {
  local header_text header_fill
  header_text="${1::${box_width}}"

  # Add the left margin and header label
  printf -- "%${box_margin}s" ''
  printf -- '%b%s' "${BASE}${box_upper_left}${box_horizontal}" "${header_text}"

  # Fill space to make it the same width as the $box_width
  (( header_fill = box_width - ${#header_text} + 1 ))
  printf -v header_fill "%${header_fill}s" ''
  printf -- '%b' "${header_fill// /${box_horizontal}}"

  # Reset the color
  printf -- '%b\n' "${box_upper_right}${RESET}"
}
box__draw_row() {
  local row_label row_description row_fill
  row_label="${1::${box_width}}"; shift
  row_description="$*"

  # Print the label for the current row (goes inside of the box)
  printf -- "%${box_margin}s" ''
  printf -- '%b %s' "${BASE}${box_vertical}${RESET}" "${row_label}"

  # Adds $box_width number of spaces + 1 to align everything
  # also needs to add 1 because of the space we added before.
  (( row_fill = box_width - ${#row_label} + 1 ))
  printf -- "%${row_fill}s" ''

  # Print the description for the current row (goes outside of the box)
  printf -- '%b %b\n' "${BASE}${box_vertical}${RESET}" "${row_description}"
}
box__draw_change() {
  local change_fill

  # Add the left margin and print the left side of the box
  printf -- "%${box_margin}s" ''
  printf -- '%b' "${BASE}${box_divider_left}${box_horizontal}"

  # Add the spaces then replace them with the $box_horizontal
  printf -v change_fill "%${box_width}s" ''
  printf -- '%b' "${change_fill// /${box_horizontal}}"

  # Print the right side of the box
  printf -- '%b\n' "${box_horizontal}${box_divider_right}${RESET}"
}
box__draw_bottom() {
  local bottom_fill

  # Add the left margin and print the left side of the box
  printf -- "%${box_margin}s" ''
  printf -- '%b' "${BASE}${box_bottom_left}${box_horizontal}"

  # Add the spaces then replace them with the $box_horizontal
  printf -v bottom_fill "%${box_width}s" ''
  printf -- '%b' "${bottom_fill// /${box_horizontal}}"

  # Print the right side of the box
  printf -- '%b\n' "${box_horizontal}${box_bottom_right}${RESET}"
}

# Fetch Stuff
get_title() {
  local user host
  user="${USER:-$(id -un)}"
  host="${HOSTNAME:-${hostname:-$(hostname 2>/dev/null)}}"

  # If the user decides to hide his username from diplaying, unset usr
  [[ "${hide_user}" = 'true' ]] && unset user
  # If the user decides to hide his hostname from diplaying, unset hst
  [[ "${hide_host}" = 'true' ]] && unset host

  # Use custom title if set.
  if [[ -z "${custom_title}" ]]; then
    title_text="${user}${host:+@${host}}"
    title_text="${title_text#@}"
  else
    title_text="${custom_title}"
  fi

  # The width is used to set the box_width (if the user isn't overriding it),
  # so it's easier to separate it into two different variables.
  (( title_width = ${#title_text} + 2 ))
  (( ${#title_text} < 12 )) && title_width="12"
}
get_distro() {
  local distro

  while IFS='=' read -r field_name field_value _; do
    case "${field_name}" in
      ('PRETTY_NAME')
        distro="${field_value}"
        break
      ;;
    esac
  done < /etc/os-release

  # Strip the quotes from the distro name
  distro=${distro##[\"\']}
  distro=${distro%%[\"\']}

  fetched_distro="${distro}"
}
get_kernel() {
  local kernel_full
  IFS='-' read -r kernel_full _ < /proc/sys/kernel/osrelease

  fetched_kernel="${kernel_full}"
}
get_shell() {
  local shell

  shell="${SHELL##*/} ${BASE}(${ACC_BG}${SHELL}${BASE})"
  # Get shell name by doing removing the long prefix from $SHELL
  fetched_shell="${shell}"
}
get_wm() {
  # NOTE: Current implementation depends on xprop. Would be nicer if there was
  # a way of getting the WM without external dependencies
  local window_id wm_name display_server

  # Get the window ID
  window_id="$(xprop -notype -root '_NET_SUPPORTING_WM_CHECK')"
  window_id="${window_id##* }"
  # Get the WM name
  wm_name="$(xprop -id "${window_id}" -notype '_NET_WM_NAME')"
  wm_name="${wm_name//\"}"
  wm_name="${wm_name##* }"
  # Get the display server badge
  display_server="${XDG_SESSION_TYPE:-other}"

  fetched_wm="${wm_name} ${BASE}(${ACC_BG}${display_server}${BASE})"
}
get_de() {
  fetched_de="${XDG_CURRENT_DESKTOP:-${DESKTOP_SESSION}}"
  fetched_de="${fetched_de/KDE/Plasma}"
}
get_uptime() {
  local days hours minutes secs total_uptime

  IFS=. read -r secs _ < /proc/uptime
  (( days    = secs / 60 / 60 / 24 ))
  (( hours   = secs / 60 / 60 % 24 ))
  (( minutes = secs / 60 % 60 ))

  # The only downside(?) of this approach is that if everything is set to 0, the
  # minutes will appear. Personaly, I don't really consider this to be a negative.
  total_uptime="${days} days, ${hours} hours, ${minutes} minutes"
  total_uptime="${total_uptime#0*, }"  # Remove days if it's 0
  total_uptime="${total_uptime/0*, }"  # Remove hours if it's 0
  total_uptime="${total_uptime/, 0*/}" # Remove minutes if it's 0

  # Remove plural if = 1.
  (( days    == 1 )) && total_uptime="${total_uptime/days/day}"
  (( hours   == 1 )) && total_uptime="${total_uptime/hours/hour}"
  (( minutes == 1 )) && total_uptime="${total_uptime/minutes/minute}"

  fetched_uptime="${total_uptime//,/${BASE},${ACC_FG}}"
}
get_resolution() {
  local resolution
  # Thanks again hyfetch
  # https://github.com/hykilpikonna/hyfetch/blob/master/neofetch#L3718
  for dev in /sys/class/drm/*/modes; do
    IFS= read -r sys_resolution _ < "${dev}"
    [[ -n "${sys_resolution}" ]] && resolution="${sys_resolution}, ${resolution}"
  done

  resolution="${resolution%%', '}"
  resolution="${resolution//x/${BASE}x${ACC_FG}}"
  fetched_resolution="${resolution:-null}"
}
get_cpu() {
  local cpu_full cpu_model cpu_clock
  # Get the CPU by reading from /proc/cpuinfo
  while IFS=: read -r field_name field_value _; do
    case "${field_name}" in
      "model name"*)
        cpu_full="${field_value/ /}"
        break
      ;;
    esac
  done < /proc/cpuinfo

  cpu_model="${cpu_full%% @*}"
  cpu_clock="${cpu_full##*@ }"

#   cpu_model=${cpu_model##*) }
  cpu_model=${cpu_model//\([rR]\)/}
  cpu_model=${cpu_model%% CPU}
  cpu_model=${cpu_model##CPU }
  cpu_model=${cpu_model%% with*}

  fetched_cpu="${cpu_model} ${BASE}@ ${ACC_BG}${cpu_clock}"
}
get_host() {
  local model_name
  IFS= read -r model_name _ < /sys/devices/virtual/dmi/id/product_name

  case "${model_name}" in
    # alternate file with slightly different info
	'System '*|'Default '*|'To Be Filled'*)
      IFS= read -r model_name < /sys/devices/virtual/dmi/id/board_name
  esac

  fetched_host="${model_name}"
}
get_memory() {
  local mem_total mem_used mem_percent

  # Assume that the the host is running with a kernel version newer than 3.14
  while IFS=':k ' read -r field_name field_value _; do
    case "${field_name}" in
      ("MemTotal")
        mem_total="${field_value}"
      ;;
      ("MemAvailable")
        mem_avail="${field_value}"
      ;;
    esac
  done < /proc/meminfo

  (( mem_used = (mem_total - mem_avail) / 1024 ))
  (( mem_total = mem_total / 1024 ))
  (( mem_percent = mem_used * 100 / mem_total ))

  mem_used="${mem_used:-null}"
  mem_total="${mem_total:-null}"
  mem_percent="${mem_percent:-null}"

  fetched_memory="${mem_used}${BASE}/${ACC_FG}${mem_total} MiB ${BASE}(${ACC_BG}${mem_percent}%${BASE})"
}
display_disks() {
  local bar_length bar_progress bar_total bar_output disk_fetch_regex
  bar_length="${disk_bar_width}"
  disk_fetch_regex="${disk_regex}"

  # Create a progress bar.
  # shellcheck disable=SC2312
  while IFS=' ' read -r _ disk_type _ _ _ disk_perc disk_mount _; do
    [[ "${disk_type}" = "Type" ]] && continue

    # Remove the '%' symbol and add the leading zero.
    printf -v disk_perc '%02d' "${disk_perc%\%*}"

    # https://github.com/dylanaraps/pure-bash-bible#progress-bars
    (( disk_filled = disk_perc * bar_length / 100 + 1 ))
    (( disk_total = bar_length - disk_filled ))
    printf -v bar_progress "%${disk_filled}s" ''
    printf -v bar_total "%${disk_total}s" ''

    bar_output="${ACC_FG}${bar_progress// /${icon_disk_filled}}"
    bar_output="${bar_output}${RESET}${bar_total// /${icon_disk_total}}"

    box__draw_row "  ${disk_mount}" "${COLORED_ARROW}" "${BASE}[${bar_output}${BASE}] (${ACC_BG}${disk_perc}%${BASE}) ${ACC_FG}${disk_type}${RESET}"
  done < <(grep -iE "${disk_fetch_regex}" <(LC_ALL=C df -PTh))
}

is_int()  {
  # Positive Integer check ~ https://stackoverflow.com/a/61835747
  case "${1}" in
    *[!0-9]* )
      printf -- '%b %s\n' "\033[0m\033[1;41m[ERR]\e[0m" "${*} is not a positive integer" >&2
      exit 1;
    ;;
  esac
}

draw() {
  get_distro; get_kernel
  get_shell
  get_wm; get_de
  get_uptime
  get_resolution
  get_cpu
  get_host
  get_memory

  box__draw_header "${title_text}"
  box__draw_row "${label_distro}" "${COLORED_ARROW}" "${ACC_FG}${fetched_distro} ${BASE}(${ACC_BG}${fetched_kernel}${BASE})${RESET}"
  box__draw_row "${label_shell}"  "${COLORED_ARROW}" "${ACC_FG}${fetched_shell}${RESET}"
  box__draw_row "${label_wm_de}"  "${COLORED_ARROW}" "${ACC_FG}${fetched_wm} ${BASE}+ ${ACC_FG}${fetched_de}${RESET}"
  box__draw_row "${label_uptime}" "${COLORED_ARROW}" "${ACC_FG}${fetched_uptime}${RESET}"
  box__draw_change
  box__draw_row "${label_resolution}" "${COLORED_ARROW}" "${ACC_FG}${fetched_resolution}${RESET}"
  box__draw_row "${label_cpu}" "${COLORED_ARROW}" "${ACC_FG}${fetched_cpu}${RESET}"
  box__draw_row "${label_host}" "${COLORED_ARROW}" "${ACC_FG}${fetched_host}${RESET}"
  box__draw_row "${label_ram}" "${COLORED_ARROW}" "${ACC_FG}${fetched_memory}${RESET}"
  box__draw_change
  box__draw_row "${label_disk}"; display_disks
  box__draw_bottom
}
main() {
  # Integer check
  is_int "${box_width}" 'disk_bar_width'
  is_int "${disk_bar_width}" 'disk_bar_width'
  get_title # For width stuff

  # Colors
  readonly RESET='\033[m'
  readonly BASE="${RESET}${color_base}"
  readonly ACC_FG="${RESET}${color_accent_primary}"
  readonly ACC_BG="${RESET}${color_accent_secondary}"
  readonly COLORED_ARROW="${ACC_BG}${icon_arrow}${RESET}"

  # Overrides
  box_margin='2'
  box_width="${box_width:-${title_width}}"
  disk_bar_width="${disk_bar_width:-'30'}"
  disk_regex="${disk_regex:-'^/dev'}"
  hide_username="${hide_username:-'false'}"
  hide_hostname="${hide_hostname:-'false'}"

  draw
  exit 0
}
main
