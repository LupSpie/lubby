#!/usr/bin/env bash

# 'Lubby v0.2' by Lupspie
# Inspired by:
#   'grabby v2' by sannfdev (https://github.com/sannfdev/grabby)
#   'nitch' by ssleert (https://github.com/ssleert/nitch)
#   'pfetch' by dylanaraps (https://github.com/dylanaraps/pfetch)
#   'hyfetch' by hykilpikonna (https://github.com/hykilpikonna/hyfetch)
#   'fet.sh' by 6gk (https://github.com/6gk/fet.sh)
#   'sysfetch' by wick3dr0se (https://github.com/wick3dr0se/sysfetch)

# Better error handling
# https://disconnected.systems/blog/another-bash-strict-mode/
set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
IFS=$'\n\t'

LANG=en_US.UTF-8

# Labels
readonly LABEL_DISTRO=' distro'          # Default: ' distro'
readonly LABEL_SHELL=' shell'            # Default: ' shell'
readonly LABEL_WM_DE=' wm/de'            # Default: ' wm/de'
readonly LABEL_UPTIME=' uptime'          # Default: ' uptime'
readonly LABEL_RESOLUTION=' resolution'  # Default: ' resolution'
readonly LABEL_CPU=' cpu'                # Default: ' cpu'
readonly LABEL_BOARD=' board'            # Default: ' board'
readonly LABEL_MEMORY=' memory'          # Default: ' memory'
readonly LABEL_DISK=' disk quota'        # Default: ' disk quota'
# Icons
readonly SYMBOL_DISK_FILLED='#'           # Default: '#'
readonly SYMBOL_DISK_REMAINDER='.'        # Default: '.'
readonly SYMBOL_SEPARATOR=''                 # Default: ''
# Colors ~ https://gist.github.com/iamnewton/8754917
readonly COLOR_RESET='\033[m'             # Default: '\033[m'
readonly COLOR_BASE='\033[1;37m'          # Default: '\033[1;37m'
readonly COLOR_PRIMARY='\033[1;34m'       # Default: '\033[1;34m'
readonly COLOR_SECONDARY='\033[1;33m'     # Default: '\033[1;33m'
# Box
readonly BOX_UPPER_LEFT='\xe2\x95\xad'    # Default: '\xe2\x95\xad'
readonly BOX_UPPER_RIGHT='\xe2\x95\xae'   # Default: '\xe2\x95\xae'
readonly BOX_BOTTOM_LEFT='\xe2\x95\xb0'   # Default: '\xe2\x95\xb0'
readonly BOX_BOTTOM_RIGHT='\xe2\x95\xaf'  # Default: '\xe2\x95\xaf'
readonly BOX_DIVIDER_LEFT='\xe2\x94\x9c'  # Default: '\xe2\x94\x9c'
readonly BOX_DIVIDER_RIGHT='\xe2\x94\xa4' # Default: '\xe2\x94\xa4'
readonly BOX_HORIZONTAL='\xe2\x94\x80'    # Default: '\xe2\x94\x80'
readonly BOX_VERTICAL='\xe2\x94\x82'      # Default: '\xe2\x94\x82'

box__draw_top() {
  local title fill
  title="${1::${LUB_BOX_WIDTH}}"

  # Add the left margin and header text
  printf -- '%b%s' "${COLOR_BASE}${BOX_UPPER_LEFT}${BOX_HORIZONTAL}" "${title}"

  # Fill space to make it the same width as the $LUB_BOX_WIDTH
  (( fill = LUB_BOX_WIDTH - ${#title} ))
  printf -v fill "%${fill}s" ''
  printf -- '%b' "${fill// /${BOX_HORIZONTAL}}"

  # Add both the right horizontal symbol and the corner piece + reset the color
  printf -- '%b\n' "${BOX_HORIZONTAL}${BOX_UPPER_RIGHT}${COLOR_RESET}"
}

box__draw_row() {
  local label content fill
  label="${1::${LUB_BOX_WIDTH}}"; shift
  content="$*"

  # Add the left margin and header text
  printf -- '%b %s ' "${COLOR_BASE}${BOX_VERTICAL}${COLOR_RESET}" "${label}"

  (( fill = LUB_BOX_WIDTH - ${#label} ))
  printf -- "%${fill}s" ''

  printf -- '%b %b\n' "${COLOR_BASE}${BOX_VERTICAL}${COLOR_RESET}" "${content}${COLOR_RESET}"
}

box__draw_span() {
  local left right fill
  left="$1" right="$2"

  # Add the left margin and print the left side of the box
  printf -- '%b' "${COLOR_BASE}${left}${BOX_HORIZONTAL}"

  # Add the spaces then replace them with the $box_horizontal
  printf -v fill "%${LUB_BOX_WIDTH}s" ''
  printf -- '%b' "${fill// /${BOX_HORIZONTAL}}"

  # Print the right side of the box
  printf -- '%b\n' "${BOX_HORIZONTAL}${right}${COLOR_RESET}"
}

#
# Grabs the distribution name from the /etc/os-release file.
# Sets the distro_name variable.
#
grab_distro() {
  local distro

  while IFS='=' read -r name value _; do
    case "${name}" in
      ('PRETTY'*)
        : "${name//\'}"
        : "${value//\"}"
        distro="${_}"; break
      ;;
    esac
  done < /etc/os-release

  distro_name="${distro}"
}
#
# Grabs the kernel version from /proc/sys/kernel/osrelease.
# Sets the kernel_version variable.
#
grab_kernel() {
  local version

  # Read everything before the '-' from osrelease
  IFS='-' read -r version _ < /proc/sys/kernel/osrelease

  kernel_version="${version}"
}
#
# Grabs the shell name and path.
# Sets the shell_name and shell_path variables.
#
grab_shell() {
  shell_name="${SHELL##*/}"
  shell_path="${SHELL}"
}
#
# Grabs information about the graphical environment, including the
# window manager, desktop environment, and display server.
# Sets the graphical_wm, graphical_de, and graphical_server variables.
#
grab_graphical() {
  # TODO: Find a reliable way without using xprop
  local wm_name de_name display_server

  # Grab the WM name
  # - Get the window ID
  : "$(xprop -notype -root '_NET_SUPPORTING_WM_CHECK' || true)"
  : "${_##* }"
  # - Get the WM name
  : "$(xprop -id "${_}" -notype '_NET_WM_NAME' || true)"
  : "${_//\"}"
  wm_name="${_##* }"

  # Grab the DE/Session name
  : "${XDG_CURRENT_DESKTOP:-${DESKTOP_SESSION}}"
  de_name="${_/KDE/Plasma}"

  # Grab the display server name
  display_server="${XDG_SESSION_TYPE:-other}"

  graphical_wm="${wm_name}"
  graphical_de="${de_name}"
  graphical_server="${display_server}"
}
#
# Grabs system uptime and formats it as days, hours, and minutes.
# Sets the uptime_total variable.
#
grab_uptime() {
  local secs minutes hours days

  IFS=. read -r secs _ < /proc/uptime
  (( days    = secs / 60 / 60 / 24 ))
  (( hours   = secs / 60 / 60 % 24 ))
  (( minutes = secs / 60 % 60 ))

  # NOTE: When a user first boots up their computer, minutes will be set to 0
  # this can technically be considered a bug, but I'm not bothered by it.
  : "${days} days, ${hours} hours, ${minutes} minutes"
  : "${_#0*, }"  # Remove days if equal to 0
  : "${_/0*, }"  # Remove hours if equal to 0
  total_uptime="${_/, 0*/}" # Remove minutes if equal to 0

  # Remove plurals if equals to 1.
  (( days    == 1 )) && total_uptime="${total_uptime/"days"/"day"}"
  (( hours   == 1 )) && total_uptime="${total_uptime/"hours"/"hour"}"
  (( minutes == 1 )) && total_uptime="${total_uptime/"minutes"/"minute"}"

  uptime_total="${total_uptime}"
}
#
# Grabs display resolutions from /sys/class/drm/*/modes.
# Sets the resolution_all variable.
#
grab_resolution() {
  local resolution sys_resolution
  # Huge thanks to hyfetch <3
  # https://github.com/hykilpikonna/hyfetch/blob/master/neofetch
  for dev in /sys/class/drm/*/modes; do
    IFS= read -r sys_resolution _ < "${dev}"
    [[ -z "${sys_resolution}" ]] && continue

    resolution="${sys_resolution}, ${resolution:-}"
  done

  resolution_all="${resolution%%', '}"
}
#
# Grabs CPU information including the model and maximum frequency.
# Sets the cpu_model and cpu_freq variables.
#
grab_cpu() {
  local cpu_full freq_khz name val
  # Get the CPU by reading from /proc/cpuinfo
  while IFS=: read -r name val _; do
    case "${name}" in
      "model name"*)
        cpu_full="${val#* }"
        break
      ;;
    esac
  done < /proc/cpuinfo

  # Format the CPU name
  : "${cpu_full%% @*}"
  # : "${_##*) }"
  : "${_//\([rR]\)/}"
  : "${_%% CPU}"
  : "${_##CPU }"
  : "${_%% with*}"
  cpu_model="${_}"

  # Format the CPU Max freq
  : '/sys/devices/system/cpu/cpu0/cpufreq'
  read -r freq_khz < "${_}/scaling_max_freq"
  # Bash doesn't do floating point math, so we'll use bc instead.
  read -r maxFreq < <(bc -l <<< "scale=2; ${freq_khz}/1000000")
  
  cpu_freq="${maxFreq}"
}
#
# Grabs the model name of the system board.
# Sets the device_board variable.
#
grab_board() {
  local model_name
  read -r model_name < /sys/devices/virtual/dmi/id/board_name
  
  : "${model_name//(/${COLOR_BASE}(${COLOR_SECONDARY}}"
  : "${_//)/${COLOR_BASE})${COLOR_RESET}}"

  device_board="${_}"
}
#
# Grabs memory information, including total, available, used, and percentage used.
# Sets the mem_total, mem_avail, mem_used, and mem_percent variables.
# 
grab_memory() {
  # We're assuming that the the host is running with kernel 3.14+
  while IFS=':k ' read -r name val _; do
    case "${name}" in
      ("MemTotal")
        mem_total="${val}"
      ;;
      ("MemAvailable")
        mem_avail="${val}"
      ;;
    esac
  done < /proc/meminfo

  (( mem_used = (mem_total - mem_avail) / 1024 ))
  (( mem_total = mem_total / 1024 ))
  (( mem_percent = mem_used * 100 / mem_total ))

  mem_used="${mem_used:-'null'}"
  mem_total="${mem_total:-'null'}"
  mem_percent="${mem_percent:-'null'}"
}
#
# Grabs disk information and calculates progress bar values.
# Takes a disk line from the 'df' command as an argument.
# Sets variables related to disk information.
#
grab_disk() {
    local df_disk_line
    df_disk_line="${1}"

    IFS=' ' read -r _ disk_type _ _ _ disk_perc disk_mount _ <<< "${df_disk_line}"
    
    [[ "${disk_type}" = "Type" ]] && return 1

    # Remove the '%' symbol.
    printf -v disk_perc '%02d' "${disk_perc%\%*}"

    # Calculate progress bar values
    read -r disk_filled < <(bc -l <<< "scale=2; (${disk_perc} * ${disk_bar_width}) / 100 + 1")
    read -r disk_total < <(bc -l <<< "scale=2; ${disk_bar_width} - ${disk_filled}")

    # Create progress bar strings
    printf -v bar_progress "%${disk_filled}s" ''
    printf -v bar_total "%${disk_total}s" ''

    # Create formatted output
    bar_filled="${bar_progress// /${SYMBOL_DISK_FILLED}}"
    bar_remainder="${bar_output:-}${bar_total// /${SYMBOL_DISK_REMAINDER}}"
}

# Define the username and the hostname
user="${USER:-$(id -un)}"
host="${HOSTNAME:-$(hostname 2>/dev/null)}"

# Set the title to either the custom variable, or the user@host
# - Hide if LUB_NO_TITLE is declared
title="${LUB_CUSTOM_TITLE:-${user}@${host}}"
[[ -n "${LUB_NO_TITLE:-}" ]] && unset title

# Get the size of the title and add a little bit of padding to the right (2 by default)
# - Set a size of 12 as the minimum
# - If LUB_BOX_WIDTH is set, use that instead of the title width
(( title_width = ${#title} + 2 ))
(( title_width < 12 )) && title_width=12
LUB_BOX_WIDTH="${LUB_BOX_WIDTH:-${title_width}}"

# Set the regex pattern for locating drives (default is "/sda*"")
# and the width of the bar (default is 25)
disk_regex="${LUB_DISK_REGEX:-"/sda*"}"
disk_bar_width="${LUB_DISK_BAR_WIDTH:-25}"

# Initialize (e.g: Grab) all the variables
grab_distro; grab_kernel; grab_shell; grab_graphical; grab_uptime; grab_resolution; grab_cpu; grab_board; grab_memory

# Print the fetched information!
box__draw_top  "${title}"

box__draw_row  "${LABEL_DISTRO}" "${COLOR_PRIMARY}${distro_name} ${COLOR_BASE}(${COLOR_SECONDARY}${kernel_version}${COLOR_BASE})"
box__draw_row  "${LABEL_SHELL}"  "${COLOR_PRIMARY}${shell_name} ${COLOR_BASE}(${COLOR_SECONDARY}${shell_path}${COLOR_BASE})"
box__draw_row  "${LABEL_WM_DE}"  "${COLOR_PRIMARY}${graphical_wm} ${COLOR_BASE}(${COLOR_SECONDARY}${graphical_server}${COLOR_BASE}) + ${COLOR_PRIMARY}${graphical_de}"
box__draw_row  "${LABEL_UPTIME}" "${COLOR_PRIMARY}${uptime_total//,/${COLOR_BASE},${COLOR_PRIMARY}}"

box__draw_span "${BOX_DIVIDER_LEFT}" "${BOX_DIVIDER_RIGHT}"

box__draw_row  "${LABEL_RESOLUTION}" "${COLOR_PRIMARY}${resolution_all//,/${COLOR_BASE},${COLOR_PRIMARY}}"
box__draw_row  "${LABEL_CPU}" "${COLOR_PRIMARY}${cpu_model} ${COLOR_BASE}@ ${COLOR_SECONDARY}${cpu_freq}GHz"
box__draw_row  "${LABEL_BOARD}" "${COLOR_PRIMARY}${device_board}"
box__draw_row  "${LABEL_MEMORY}" "${COLOR_PRIMARY}${mem_used}${COLOR_BASE}/${COLOR_PRIMARY}${mem_total} MiB ${COLOR_BASE}(${COLOR_SECONDARY}${mem_percent}%${COLOR_BASE})"

box__draw_span "${BOX_DIVIDER_LEFT}" "${BOX_DIVIDER_RIGHT}"

# Process each disk line
box__draw_row  "${LABEL_DISK}"
while IFS= read -r line; do
  grab_disk "$line" || continue
  box__draw_row "  ${disk_mount}" "${COLOR_BASE}[ ${COLOR_PRIMARY}${bar_filled}${COLOR_BASE}${bar_remainder} (${COLOR_SECONDARY}${disk_perc}%${COLOR_BASE}) ] ${COLOR_PRIMARY}${disk_type}"
done < <(grep -iE "${disk_regex}" <(LC_ALL=C df -PTh))

box__draw_span "${BOX_BOTTOM_LEFT}" "${BOX_BOTTOM_RIGHT}"
